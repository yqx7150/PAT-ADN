ADNTrain(
  (model_g): ADN(
    (encoder_low): Encoder(
      (conv0): ConvolutionBlock(
        (pad): ReflectionPad2d((3, 3, 3, 3))
        (conv): Conv2d(3, 64, kernel_size=(7, 7), stride=(1, 1))
        (norm): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
        (activ): ReLU(inplace)
      )
      (conv1): ConvolutionBlock(
        (pad): ReflectionPad2d((1, 1, 1, 1))
        (conv): Conv2d(64, 128, kernel_size=(4, 4), stride=(2, 2))
        (norm): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
        (activ): ReLU(inplace)
      )
      (conv2): ConvolutionBlock(
        (pad): ReflectionPad2d((1, 1, 1, 1))
        (conv): Conv2d(128, 256, kernel_size=(4, 4), stride=(2, 2))
        (norm): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
        (activ): ReLU(inplace)
      )
      (res0): ResidualBlock(
        (model): Sequential(
          (0): ConvolutionBlock(
            (pad): ReflectionPad2d((1, 1, 1, 1))
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1))
            (norm): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
            (activ): ReLU(inplace)
          )
          (1): ConvolutionBlock(
            (pad): ReflectionPad2d((1, 1, 1, 1))
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1))
            (norm): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
          )
        )
      )
      (res1): ResidualBlock(
        (model): Sequential(
          (0): ConvolutionBlock(
            (pad): ReflectionPad2d((1, 1, 1, 1))
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1))
            (norm): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
            (activ): ReLU(inplace)
          )
          (1): ConvolutionBlock(
            (pad): ReflectionPad2d((1, 1, 1, 1))
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1))
            (norm): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
          )
        )
      )
      (res2): ResidualBlock(
        (model): Sequential(
          (0): ConvolutionBlock(
            (pad): ReflectionPad2d((1, 1, 1, 1))
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1))
            (norm): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
            (activ): ReLU(inplace)
          )
          (1): ConvolutionBlock(
            (pad): ReflectionPad2d((1, 1, 1, 1))
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1))
            (norm): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
          )
        )
      )
      (res3): ResidualBlock(
        (model): Sequential(
          (0): ConvolutionBlock(
            (pad): ReflectionPad2d((1, 1, 1, 1))
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1))
            (norm): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
            (activ): ReLU(inplace)
          )
          (1): ConvolutionBlock(
            (pad): ReflectionPad2d((1, 1, 1, 1))
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1))
            (norm): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
          )
        )
      )
    )
    (encoder_high): Encoder(
      (conv0): ConvolutionBlock(
        (pad): ReflectionPad2d((3, 3, 3, 3))
        (conv): Conv2d(3, 64, kernel_size=(7, 7), stride=(1, 1))
        (norm): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
        (activ): ReLU(inplace)
      )
      (conv1): ConvolutionBlock(
        (pad): ReflectionPad2d((1, 1, 1, 1))
        (conv): Conv2d(64, 128, kernel_size=(4, 4), stride=(2, 2))
        (norm): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
        (activ): ReLU(inplace)
      )
      (conv2): ConvolutionBlock(
        (pad): ReflectionPad2d((1, 1, 1, 1))
        (conv): Conv2d(128, 256, kernel_size=(4, 4), stride=(2, 2))
        (norm): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
        (activ): ReLU(inplace)
      )
      (res0): ResidualBlock(
        (model): Sequential(
          (0): ConvolutionBlock(
            (pad): ReflectionPad2d((1, 1, 1, 1))
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1))
            (norm): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
            (activ): ReLU(inplace)
          )
          (1): ConvolutionBlock(
            (pad): ReflectionPad2d((1, 1, 1, 1))
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1))
            (norm): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
          )
        )
      )
      (res1): ResidualBlock(
        (model): Sequential(
          (0): ConvolutionBlock(
            (pad): ReflectionPad2d((1, 1, 1, 1))
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1))
            (norm): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
            (activ): ReLU(inplace)
          )
          (1): ConvolutionBlock(
            (pad): ReflectionPad2d((1, 1, 1, 1))
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1))
            (norm): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
          )
        )
      )
      (res2): ResidualBlock(
        (model): Sequential(
          (0): ConvolutionBlock(
            (pad): ReflectionPad2d((1, 1, 1, 1))
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1))
            (norm): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
            (activ): ReLU(inplace)
          )
          (1): ConvolutionBlock(
            (pad): ReflectionPad2d((1, 1, 1, 1))
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1))
            (norm): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
          )
        )
      )
      (res3): ResidualBlock(
        (model): Sequential(
          (0): ConvolutionBlock(
            (pad): ReflectionPad2d((1, 1, 1, 1))
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1))
            (norm): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
            (activ): ReLU(inplace)
          )
          (1): ConvolutionBlock(
            (pad): ReflectionPad2d((1, 1, 1, 1))
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1))
            (norm): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
          )
        )
      )
    )
    (encoder_art): Encoder(
      (conv0): ConvolutionBlock(
        (pad): ReflectionPad2d((3, 3, 3, 3))
        (conv): Conv2d(3, 64, kernel_size=(7, 7), stride=(1, 1))
        (norm): InstanceNorm2d(64, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
        (activ): ReLU(inplace)
      )
      (conv1): ConvolutionBlock(
        (pad): ReflectionPad2d((1, 1, 1, 1))
        (conv): Conv2d(64, 128, kernel_size=(4, 4), stride=(2, 2))
        (norm): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
        (activ): ReLU(inplace)
      )
      (conv2): ConvolutionBlock(
        (pad): ReflectionPad2d((1, 1, 1, 1))
        (conv): Conv2d(128, 256, kernel_size=(4, 4), stride=(2, 2))
        (norm): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
        (activ): ReLU(inplace)
      )
      (res0): ResidualBlock(
        (model): Sequential(
          (0): ConvolutionBlock(
            (pad): ReflectionPad2d((1, 1, 1, 1))
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1))
            (norm): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
            (activ): ReLU(inplace)
          )
          (1): ConvolutionBlock(
            (pad): ReflectionPad2d((1, 1, 1, 1))
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1))
            (norm): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
          )
        )
      )
      (res1): ResidualBlock(
        (model): Sequential(
          (0): ConvolutionBlock(
            (pad): ReflectionPad2d((1, 1, 1, 1))
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1))
            (norm): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
            (activ): ReLU(inplace)
          )
          (1): ConvolutionBlock(
            (pad): ReflectionPad2d((1, 1, 1, 1))
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1))
            (norm): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
          )
        )
      )
      (res2): ResidualBlock(
        (model): Sequential(
          (0): ConvolutionBlock(
            (pad): ReflectionPad2d((1, 1, 1, 1))
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1))
            (norm): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
            (activ): ReLU(inplace)
          )
          (1): ConvolutionBlock(
            (pad): ReflectionPad2d((1, 1, 1, 1))
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1))
            (norm): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
          )
        )
      )
      (res3): ResidualBlock(
        (model): Sequential(
          (0): ConvolutionBlock(
            (pad): ReflectionPad2d((1, 1, 1, 1))
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1))
            (norm): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
            (activ): ReLU(inplace)
          )
          (1): ConvolutionBlock(
            (pad): ReflectionPad2d((1, 1, 1, 1))
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1))
            (norm): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
          )
        )
      )
    )
    (decoder): Decoder(
      (res0): ResidualBlock(
        (model): Sequential(
          (0): ConvolutionBlock(
            (pad): ReflectionPad2d((1, 1, 1, 1))
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1))
            (norm): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
            (activ): LeakyReLU(negative_slope=0.2, inplace)
          )
          (1): ConvolutionBlock(
            (pad): ReflectionPad2d((1, 1, 1, 1))
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1))
            (norm): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
          )
        )
      )
      (res1): ResidualBlock(
        (model): Sequential(
          (0): ConvolutionBlock(
            (pad): ReflectionPad2d((1, 1, 1, 1))
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1))
            (norm): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
            (activ): LeakyReLU(negative_slope=0.2, inplace)
          )
          (1): ConvolutionBlock(
            (pad): ReflectionPad2d((1, 1, 1, 1))
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1))
            (norm): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
          )
        )
      )
      (res2): ResidualBlock(
        (model): Sequential(
          (0): ConvolutionBlock(
            (pad): ReflectionPad2d((1, 1, 1, 1))
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1))
            (norm): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
            (activ): LeakyReLU(negative_slope=0.2, inplace)
          )
          (1): ConvolutionBlock(
            (pad): ReflectionPad2d((1, 1, 1, 1))
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1))
            (norm): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
          )
        )
      )
      (res3): ResidualBlock(
        (model): Sequential(
          (0): ConvolutionBlock(
            (pad): ReflectionPad2d((1, 1, 1, 1))
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1))
            (norm): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
            (activ): LeakyReLU(negative_slope=0.2, inplace)
          )
          (1): ConvolutionBlock(
            (pad): ReflectionPad2d((1, 1, 1, 1))
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1))
            (norm): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
          )
        )
      )
      (conv0): Sequential(
        (0): Upsample(scale_factor=2, mode=nearest)
        (1): ConvolutionBlock(
          (pad): ReflectionPad2d((2, 2, 2, 2))
          (conv): Conv2d(256, 128, kernel_size=(5, 5), stride=(1, 1))
          (norm): LayerNorm()
          (activ): LeakyReLU(negative_slope=0.2, inplace)
        )
      )
      (conv1): Sequential(
        (0): Upsample(scale_factor=2, mode=nearest)
        (1): ConvolutionBlock(
          (pad): ReflectionPad2d((2, 2, 2, 2))
          (conv): Conv2d(128, 64, kernel_size=(5, 5), stride=(1, 1))
          (norm): LayerNorm()
          (activ): LeakyReLU(negative_slope=0.2, inplace)
        )
      )
      (conv2): ConvolutionBlock(
        (pad): ReflectionPad2d((3, 3, 3, 3))
        (conv): Conv2d(64, 3, kernel_size=(7, 7), stride=(1, 1))
        (activ): Tanh()
      )
      (fuse0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
      (fuse1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1))
      (fuse2): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1))
    )
    (decoder_art): Decoder(
      (res0): ResidualBlock(
        (model): Sequential(
          (0): ConvolutionBlock(
            (pad): ReflectionPad2d((1, 1, 1, 1))
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1))
            (norm): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
            (activ): LeakyReLU(negative_slope=0.2, inplace)
          )
          (1): ConvolutionBlock(
            (pad): ReflectionPad2d((1, 1, 1, 1))
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1))
            (norm): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
          )
        )
      )
      (res1): ResidualBlock(
        (model): Sequential(
          (0): ConvolutionBlock(
            (pad): ReflectionPad2d((1, 1, 1, 1))
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1))
            (norm): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
            (activ): LeakyReLU(negative_slope=0.2, inplace)
          )
          (1): ConvolutionBlock(
            (pad): ReflectionPad2d((1, 1, 1, 1))
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1))
            (norm): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
          )
        )
      )
      (res2): ResidualBlock(
        (model): Sequential(
          (0): ConvolutionBlock(
            (pad): ReflectionPad2d((1, 1, 1, 1))
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1))
            (norm): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
            (activ): LeakyReLU(negative_slope=0.2, inplace)
          )
          (1): ConvolutionBlock(
            (pad): ReflectionPad2d((1, 1, 1, 1))
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1))
            (norm): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
          )
        )
      )
      (res3): ResidualBlock(
        (model): Sequential(
          (0): ConvolutionBlock(
            (pad): ReflectionPad2d((1, 1, 1, 1))
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1))
            (norm): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
            (activ): LeakyReLU(negative_slope=0.2, inplace)
          )
          (1): ConvolutionBlock(
            (pad): ReflectionPad2d((1, 1, 1, 1))
            (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1))
            (norm): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
          )
        )
      )
      (conv0): Sequential(
        (0): Upsample(scale_factor=2, mode=nearest)
        (1): ConvolutionBlock(
          (pad): ReflectionPad2d((2, 2, 2, 2))
          (conv): Conv2d(256, 128, kernel_size=(5, 5), stride=(1, 1))
          (norm): LayerNorm()
          (activ): LeakyReLU(negative_slope=0.2, inplace)
        )
      )
      (conv1): Sequential(
        (0): Upsample(scale_factor=2, mode=nearest)
        (1): ConvolutionBlock(
          (pad): ReflectionPad2d((2, 2, 2, 2))
          (conv): Conv2d(128, 64, kernel_size=(5, 5), stride=(1, 1))
          (norm): LayerNorm()
          (activ): LeakyReLU(negative_slope=0.2, inplace)
        )
      )
      (conv2): ConvolutionBlock(
        (pad): ReflectionPad2d((3, 3, 3, 3))
        (conv): Conv2d(64, 3, kernel_size=(7, 7), stride=(1, 1))
        (activ): Tanh()
      )
      (fuse0): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
      (fuse1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1))
      (fuse2): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1))
    )
  )
  (model_dl): NLayerDiscriminator(
    (model): Sequential(
      (0): Conv2d(3, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
      (1): LeakyReLU(negative_slope=0.2, inplace)
      (2): Conv2d(64, 128, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
      (3): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
      (4): LeakyReLU(negative_slope=0.2, inplace)
      (5): Conv2d(128, 256, kernel_size=(4, 4), stride=(1, 1), padding=(1, 1))
      (6): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
      (7): LeakyReLU(negative_slope=0.2, inplace)
      (8): Conv2d(256, 1, kernel_size=(4, 4), stride=(1, 1), padding=(1, 1))
    )
  )
  (model_dh): NLayerDiscriminator(
    (model): Sequential(
      (0): Conv2d(3, 64, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
      (1): LeakyReLU(negative_slope=0.2, inplace)
      (2): Conv2d(64, 128, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
      (3): InstanceNorm2d(128, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
      (4): LeakyReLU(negative_slope=0.2, inplace)
      (5): Conv2d(128, 256, kernel_size=(4, 4), stride=(1, 1), padding=(1, 1))
      (6): InstanceNorm2d(256, eps=1e-05, momentum=0.1, affine=False, track_running_stats=False)
      (7): LeakyReLU(negative_slope=0.2, inplace)
      (8): Conv2d(256, 1, kernel_size=(4, 4), stride=(1, 1), padding=(1, 1))
    )
  )
)
